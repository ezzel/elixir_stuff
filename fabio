defmodule Marina do
  @moduledoc """
  Documentation for Fabio.
  """

  def final_score() do
    # Define base map
    base_game = %{away: %{score: 0, players: %{}}, home: %{score: 0, players: %{}}}

    # Data transform
    get_score()
    |> String.split("\n")
    # |> Enum.reduce(base_game, fn x, acc ->
    #   case parse_line(x) do
    #     {:score, team, player_number} -> update_team_score(acc, team, player_number)
    #     {:ignore, _response} -> acc
    #   end
    # end)
  end

  defp parse_line("SCORE AWAY PLAYER" <> player_number), do: {:score, :away, player_number}
  defp parse_line("SCORE HOME PLAYER" <> player_number), do: {:score, :home, player_number}
  defp parse_line(_), do: {:ignore, "Could not match"}

  defp update_team_score(acc, team, player_number) do


    #%{away: away, score: away_score, home: home, score: home_score} = acc
    # case team do
    #   :away -> acc= %{away: %{players: %{}, score: 0}, home: %{players: %{}, score: 0}}
    #   :home -> acc= %{away: %{players: %{}, score: 0}, home: %{players: %{}, score: 0}}
    # end
    Map.update!(acc, team, fn(x) ->
      map = %{player_number: player_number }
      %{players: %{}, score: x.score + 1}

    end)

  end

  defp get_score do
    """
    GAME START 1000
    SCORE AWAY PLAYER 5
    SCORE AWAY PLAYER 5
    SCORE HOME PLAYER 1
    SCORE AWAY PLAYER 2
    SCORE HOME PLAYER 4
    SCORE HOME PLAYER 11
    SCORE AWAY PLAYER 1
    SCORE AWAY PLAYER 5
    SCORE AWAY PLAYER 11
    SCORE AWAY PLAYER 5
    SCORE HOME PLAYER 1
    SCORE HOME PLAYER 23
    SCORE HOME PLAYER 2
    SCORE HOME PLAYER 3
    SCORE AWAY PLAYER 3
    SCORE HOME PLAYER 23
    SCORE HOME PLAYER 1
    SCORE AWAY PLAYER 11
    SCORE AWAY PLAYER 11
    SCORE AWAY PLAYER 11
    SCORE AWAY PLAYER 2
    SCORE HOME PLAYER 5
    SCORE AWAY PLAYER 10
    SCORE HOME PLAYER 23
    SCORE HOME PLAYER 11
    SCORE HOME PLAYER 23
    GAME END 1000
    """
  end
end
